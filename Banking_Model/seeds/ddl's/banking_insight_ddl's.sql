-- DDL for creating customers table

create TABLE CUSTOMERS (
	CUSTOMER_ID NUMBER(38,0) NOT NULL,
	CUSTOMER_NAME VARCHAR(50) NOT NULL,
	CUSTOMER_ADDRESS VARCHAR(50) NOT NULL,
	CUSTOMER_ADDRESS_LINE2 VARCHAR(50),
	CUSTOMER_CITY VARCHAR(50) NOT NULL,
	CUSTOMER_STATE VARCHAR(50) NOT NULL,
	CUSTOMER_ZIP VARCHAR(50) NOT NULL,
	CUSTOMER_PHONE VARCHAR(50) NOT NULL,
	CUSTOMER_TYPE VARCHAR(50) NOT NULL,
	CUSTOMER_TAXPAYER_ID NUMBER(38,0) NOT NULL,
    CIF_NUMBER VARCHAR(50) NOT NULL,
	CREATED_BY VARCHAR(255) NOT NULL,
	UPDATED_BY VARCHAR(255) NOT NULL,
	CREATED_DATE DATE NOT NULL,
	UPDATED_DATE DATE NOT NULL,
	SSN VARCHAR(11),
	EMAIL VARCHAR(255),
	MONTHLY_INCOME NUMBER(38,2),
	NET_ASSET_VALUE NUMBER(38,2),
	NET_LIABILITY NUMBER(38,2),
	primary key (CUSTOMER_ID)
);




-- DDL for creating account_applications table

CREATE TABLE ACCOUNT_APPLICATIONS(
    ACCOUNT_APPLICATION_ID INTEGER NOT NULL,
    APPLICATION_STATUS VARCHAR(30) NOT NULL,
    APPLIED_DATE DATE NULL,
    APPLICATION_TYPE_ID INTEGER NULL,
    ACCOUNT_APPLICATION_STATE VARCHAR(255) NOT NULL,
    PRIMARY KEY (ACCOUNT_APPLICATION_ID)
);

-- DDL for creating account_type table

CREATE TABLE ACCOUNT_TYPES(
    ACCOUNT_TYPE_ID INTEGER NOT NULL,
    ACCOUNT_TYPE VARCHAR(40) NOT NULL,
    ACCOUNT_TYPE_DESCRIPTION VARCHAR(255) NOT NULL,
    PRIMARY KEY (ACCOUNT_TYPE_ID)
);

-- DDL for creating transaction_formats table

CREATE TABLE TRANSACTION_FORMATS(
    FORMAT_ID INTEGER NOT NULL,
    FORMAT_TYPE VARCHAR(20) NOT NULL,
    FORMAT_DESCRIPTION VARCHAR(255) NOT NULL,
    PRIMARY KEY (FORMAT_ID)
);

-- DDL for creating transaction_types table 

CREATE TABLE TRANSACTION_TYPES(
    TRANSACTION_TYPE_ID INTEGER NOT NULL,
    TRANSACTION_TYPE VARCHAR(20) NOT NULL,
    TRANSACTION_TYPE_DESCRIPTION VARCHAR(255) NOT NULL,
    PRIMARY KEY (TRANSACTION_TYPE_ID)
);

-- DDL for creating branches table
   CREATE TABLE BRANCHES(
   BRANCH_ID INTEGER NOT NULL,
   BRANCH_NAME VARCHAR(50) NOT NULL,
   BRANCH_CODE NUMBER(38,0) NOT NULL,
   BRANCH_HEAD_ID NUMBER(38,0) NOT NULL,
   BRANCH_ADDRESS_LINE1 VARCHAR(50) NOT NULL,
   BRANCH_ADDRESS_LINE2 VARCHAR(50),
   BRANCH_CITY VARCHAR(50) NOT NULL,
   BRANCH_STATE VARCHAR(50) NOT NULL,
   BRANCH_ZIP VARCHAR(50) NOT NULL,
   BRANCH_TELEPHONE VARCHAR(50) NOT NULL,
   EMAIL_ADDRESS VARCHAR(255),
   PRIMARY KEY (BRANCH_ID)
);


-- DDL for creating accounts table

CREATE TABLE ACCOUNTS(
    ACCOUNT_ID INTEGER NOT NULL,
    CUSTOMER_ID INTEGER NOT NULL,
    ACCOUNT_TYPE_ID INTEGER NOT NULL,
    BRANCH_ID INTEGER NOT NULL,
    ACCOUNT_OPEN_DATE DATE NOT NULL,
    ACCOUNT_CLOSE_DATE DATE,
    ACCOUNT_STATUS VARCHAR(25) NOT NULL,
    CREATED_BY VARCHAR(255) NOT NULL,
    UPDATED_BY VARCHAR(255) NOT NULL,
    CREATED_DATE DATE NOT NULL,
    UPDATED_DATE DATE NOT NULL,
    ACCOUNT_NUMBER INTEGER NOT NULL,
    ACCOUNT_APPLICATION_ID INTEGER NOT NULL,
    PRIMARY KEY (ACCOUNT_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (ACCOUNT_TYPE_ID) REFERENCES ACCOUNT_TYPES(ACCOUNT_TYPE_ID),
    FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES(BRANCH_ID)
);

-- DDL for creating transactions table

CREATE TABLE TRANSACTIONS(
    TRANSACTION_ID INTEGER NOT NULL,
    ACCOUNT_ID INTEGER NOT NULL,
    FORMAT_ID INTEGER NOT NULL,
    TRANSACTION_TYPE_ID INTEGER NOT NULL,
    SOURCE VARCHAR(20) NOT NULL,
    FILENAME VARCHAR(100) NOT NULL,
    SENDER VARCHAR(200) NOT NULL,
    RECEIVER VARCHAR(200) NOT NULL,
    TRANSACTION_DATE DATE NOT NULL,
    PROCESS_DATE DATE NOT NULL,
    PROCESS_STATUS VARCHAR(15) NOT NULL,
    CREATED_BY VARCHAR(225) NOT NULL,
    CREATED_DATE DATE NOT NULL,
    UPDATED_DATE DATE NOT NULL,
    UPDATED_BY VARCHAR(225) NOT NULL,
    CURRENCY_CODE VARCHAR(50) NOT NULL DEFAULT 'US$',
	CHECK_NUMBER NUMBER(38,0),
	TRANSACTION_AMOUNT NUMBER(10,2),
	BANK_TO_BANK_INFO VARCHAR(225),
	FOREIGN_TRANSACTION BOOLEAN,
	SENDER_ABA_ROUTING_NUMBER NUMBER(38,0),
	RECEIVER_ABA_ROUTING_NUMBER NUMBER(38,0),
	BENEFICIARY_NAME VARCHAR(225),
	ORIGINATOR_NAME VARCHAR(225),
    ACH_ADDENDA VARCHAR(100),
    LOAN_ID NUMBER,
    LOAN_TYPE_ID NUMBER,
    PRIMARY KEY (TRANSACTION_ID),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID),
    FOREIGN KEY (FORMAT_ID) REFERENCES TRANSACTION_FORMATS(FORMAT_ID),  
    FOREIGN KEY (TRANSACTION_TYPE_ID) REFERENCES TRANSACTION_TYPES(TRANSACTION_TYPE_ID)
);

-- DDL for creating loan_types table
CREATE TABLE LOAN_TYPES (
	LOAN_TYPE_ID NUMBER(38,0) NOT NULL,
	LOAN_TYPE VARCHAR(50) NOT NULL,
    GENDER VARCHAR(20) NOT NULL,
    CIBIL_SCORE VARCHAR(50) NOT NULL,
	TIME_DURATION NUMBER(4,0) NOT NULL,
	INTEREST_RATE NUMBER(4,2) NOT NULL,
	primary key (LOAN_TYPE_ID)
);

-- DDL for creating employees table
CREATE OR REPLACE TABLE EMPLOYEES(
   EMPLOYEE_ID INTEGER NOT NULL,
   FIRST_NAME VARCHAR(50) NOT NULL,
   LAST_NAME VARCHAR(50),
   EMAIL_ADDRESS VARCHAR(255),
   EMPLOYEE_ADDRESS_LINE1 VARCHAR(50) NOT NULL,
   EMPLOYEE_ADDRESS_LINE2 VARCHAR(50),
   RESIDENCE_NUMBER NUMBER(30,0) NOT NULL,
   EMPLOYEE_CITY VARCHAR(50) NOT NULL,
   EMPLOYEE_STATE VARCHAR(50) NOT NULL,
   EMPLOYEE_ZIP VARCHAR(50) NOT NULL,
   PHONE_NUMBER VARCHAR(50) NOT NULL,
   GRADE VARCHAR(50) NOT NULL,
   TIERED_LEVEL VARCHAR(50) NOT NULL,
   BRANCH_ID INTEGER NOT NULL,
   PRIMARY KEY (EMPLOYEE_ID),
   FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES(BRANCH_ID)
);

-- DDL for creating mortgages_info table
create or replace TABLE MORTGAGES_INFO (
	PROPERTY_ID NUMBER(38,0) NOT NULL,
	PROPERTY_ADDRESS VARCHAR(255) NOT NULL,
	PROPERTY_TYPE VARCHAR(50) NOT NULL,
	PROPERTY_VALUE NUMBER(18,2) NOT NULL,
	YEAR_BUILT NUMBER(38,0) NOT NULL,
	PROPERTY_SQUARE_FOOTAGE NUMBER(38,0) NOT NULL,
	PROPERTY_OWNER_NAME VARCHAR(100) NOT NULL,
	PROPERTY_OWNER_PHONENUMBER VARCHAR(20) NOT NULL,
	PROPERTY_OWNER_EMAIL_ID VARCHAR(100) NOT NULL,
	PROPERTY_TAX_RATE NUMBER(5,2) NOT NULL,
	primary key (PROPERTY_ID)
);

-- DDL for creating loan_applications table
 CREATE OR REPLACE TABLE LOAN_APPLICATIONS(
   APPLICATION_ID INTEGER NOT NULL,
   PROPERTY_ID NUMBER(38,0) NOT NULL,
   LOAN_TYPE_ID NUMBER(38,0) NOT NULL,
   LOAN_AMOUNT NUMBER(10,2) NOT NULL,
   CUSTOMER_ID INTEGER NOT NULL,
   ACCOUNT_ID INTEGER NOT NULL,
   APPLIED_DATE DATE NOT NULL,
   EMPLOYEE_ID NUMBER(38,0) NOT NULL,
   PRIMARY KEY (APPLICATION_ID),
   FOREIGN KEY (LOAN_TYPE_ID) REFERENCES LOAN_TYPES(LOAN_TYPE_ID),
   FOREIGN key (PROPERTY_ID) REFERENCES MORTGAGES_INFO(PROPERTY_ID),
   FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
   FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID),
   FOREIGN key (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

--DDL for transfer_loan_data
create or replace TABLE TRANSFER_LOAN_DATA (
	TRANSFER_ID NUMBER(38,0) NOT NULL,
	TRANSFER_TYPE VARCHAR(5) NOT NULL,
	LOAN_AMOUNT NUMBER(38,0) NOT NULL,
	BANK_INTEREST_RATE NUMBER(38,2) NOT NULL,
	OTHER_INTEREST_RATE NUMBER(38,2) NOT NULL,
	primary key (TRANSFER_ID)
);

-- DDL for creating loan_details table
CREATE OR REPLACE TABLE LOAN_DETAILS (
	LOAN_ID NUMBER(38,0) NOT NULL,
    EMPLOYEE_ID NUMBER(38,0) NOT NULL,
	ACCOUNT_NUMBER NUMBER(38,0) NOT NULL,
	SANCTION_DATE DATE,
	LOAN_AMOUNT NUMBER(10,2) NOT NULL,
	LOAN_TYPE_ID NUMBER(38,0) NOT NULL,
	TENURE NUMBER(4,0) NOT NULL,
	EMI_AMOUNT FLOAT,
    APPLICATION_ID NUMBER(38,0) NOT NULL,
    TRANSFER_ID NUMBER(38,0),
    primary key (LOAN_ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    FOREIGN KEY (LOAN_TYPE_ID) REFERENCES LOAN_TYPES(LOAN_TYPE_ID),
    foreign key (APPLICATION_ID) references LOAN_APPLICATIONS(APPLICATION_ID),
    foreign key (TRANSFER_ID) references TRANSFER_LOAN_DATA(TRANSFER_ID)
);





-- DDL for creating fixed_deposite table
CREATE TABLE FIXED_DEPOSIT(
   FD_ID INTEGER NOT NULL,
   CUSTOMER_ID INTEGER NOT NULL,
   CERTIFICATE_NUMBER NUMBER(38,0) NOT NULL,
   AMOUNT NUMBER(10,2),
   FROM_DATE DATE NOT NULL,
   TO_DATE DATE NOT NULL,
   PERIOD VARCHAR(30) NOT NULL,
   INTEREST_RATE NUMBER(4,2) NOT NULL,
   AUTOMATIC_RENEWAL BOOLEAN NOT NULL,
   ISSUED_DATE DATE NOT NULL,
   PAYMENT_METHOD VARCHAR(50) NOT NULL,
   RECEIPT_NUMBER INTEGER NOT NULL,
   PRIMARY KEY (FD_ID),
   FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID));




-- DDL for creating employees table
CREATE OR REPLACE TABLE EMPLOYEES(
   EMPLOYEE_ID INTEGER NOT NULL,  
   FIRST_NAME VARCHAR(50) NOT NULL,
   LAST_NAME VARCHAR(50),
   EMAIL_ADDRESS VARCHAR(255),
   EMPLOYEE_ADDRESS_LINE1 VARCHAR(50) NOT NULL,
   EMPLOYEE_ADDRESS_LINE2 VARCHAR(50),
   RESIDENCE_NUMBER NUMBER(30,0) NOT NULL,
   EMPLOYEE_CITY VARCHAR(50) NOT NULL,
   EMPLOYEE_STATE VARCHAR(50) NOT NULL,
   EMPLOYEE_ZIP VARCHAR(50) NOT NULL,
   PHONE_NUMBER VARCHAR(50) NOT NULL,
   GRADE VARCHAR(50) NOT NULL,
   TIERED_LEVEL VARCHAR(50) NOT NULL,
   BRANCH_ID INTEGER NOT NULL,
   PRIMARY KEY (EMPLOYEE_ID),
   FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES(BRANCH_ID));



-- DDL for creating check_book table
   CREATE OR REPLACE TABLE CHECK_BOOK(
    ACCOUNT_ID INTEGER NOT NULL,
    REQUESTED_DATE DATE NOT NULL,
    DATE_ISSUED DATE NOT NULL,
    READY_DATE DATE NOT NULL,
    DELIVERY_DATE DATE NOT NULL,
    CHECK_NUMBER_FROM NUMBER(15,0) NOT NULL,
    CHECK_NUMBER_TO NUMBER(15,0) NOT NULL,
    CONSTRAINT PK_CONSTRAINT PRIMARY KEY (ACCOUNT_ID, DATE_ISSUED),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID));


-- DDL for creating cheque_book table
 CREATE TABLE COMMISSION_RATES(
   COMMISSION_RATE_ID NUMBER(38,0) NOT NULL,
   PRODUCT_TYPE VARCHAR(225) NOT NULL,
   TIERED_LEVEL VARCHAR(50) NOT NULL,
   COMMISSION_TARGET NUMBER(38,0) NOT NULL,
   COMMISSION_RATE NUMBER(4,2) NOT NULL,
   PRIMARY KEY (COMMISSION_RATE_ID));





-- DDL for creating customer_satisfaction table
create or replace TABLE CUSTOMER_SATISFACTION (
	SATISFACTION_ID NUMBER(38,0) NOT NULL,
	APPLICATION_ID NUMBER(38,0) NOT NULL,
	LOAN_ID NUMBER(38,0) NOT NULL,
	SATISFACTION_SCORE NUMBER(20,0) NOT NULL,
	FEEDBACK VARCHAR(225) NOT NULL,
	DATE DATE NOT NULL,
	primary key (SATISFACTION_ID),
	foreign key (APPLICATION_ID) references LOAN_APPLICATIONS(APPLICATION_ID),
	foreign key (LOAN_ID) references LOAN_DETAILS(LOAN_ID)
);



-- DDL for creating refinancing_loan table
create or replace TABLE REFINANCING_LOAN (
	REFINANCING_ID NUMBER(38,0) NOT NULL,
	LOAN_ID NUMBER(38,0) NOT NULL,
	REFINANCING_TYPE VARCHAR(50) NOT NULL,
	REFINANCING_LOAN_AMOUNT NUMBER(18,2) NOT NULL,
	ORIGINATING_DATE NUMBER(6,0) NOT NULL,
	CLOSING_DATE NUMBER(6,0) NOT NULL,
	APPRAISED_VALUE NUMBER(18,2) NOT NULL,
	primary key (REFINANCING_ID),
	foreign key (LOAN_ID) references LOAN_DETAILS(LOAN_ID)
);


--DDL for creating auto_info table
    CREATE TABLE AUTO_INFO (
	AUTO_ID NUMBER(38,0),
	BRAND VARCHAR(50),
	MODEL VARCHAR(50),
	PRICE NUMBER(38,0),
    PRIMARY KEY (AUTO_ID)
    );





-- DDL for map_auto_loan 
create or replace TABLE MAP_AUTO_LOAN (
    LOAN_ID NUMBER(38,0),
	AUTO_ID NUMBER(38,0),
    foreign key (LOAN_ID) references LOAN_DETAILS(LOAN_ID),
    foreign key (LOAN_ID) references LOAN_DETAILS(LOAN_ID)
    )


-- DDL for cif exception
create or replace TABLE CIF_EXCEPTION (
	EXCEPTION_ID NUMBER(38,0) NOT NULL,
	CUSTOMER_ID NUMBER(38,0) NOT NULL,
	EMPLOYEE_ID NUMBER(38,0) NOT NULL,
    OPEN_DATE DATE NOT NULL,
    REVIEW_DATE DATE NOT NULL,
	DOC_STATUS VARCHAR(50) NOT NULL,
	DESCRIPTION VARCHAR(225) NOT NULL,
	COMMENTS VARCHAR(225),
	primary key (EXCEPTION_ID),
    foreign key (CUSTOMER_ID) references CUSTOMERS(CUSTOMER_ID),
    foreign key (EMPLOYEE_ID) references EMPLOYEES(EMPLOYEE_ID)
);


-- DDL for account exception
create or replace TABLE ACCOUNT_EXCEPTION (
	ACCOUNT_EXCEPTION_ID NUMBER(38,0) NOT NULL,
	ACCOUNT_ID NUMBER(38,0) NOT NULL,
	EMPLOYEE_ID NUMBER(38,0) NOT NULL,
    EXCEPTION_DATE DATE NOT NULL,
	EXCEPTION_STATUS VARCHAR(50) NOT NULL,
	EXCEPTION_TYPE VARCHAR(50) NOT NULL,
	DESCRIPTION VARCHAR(225) NOT NULL,
	primary key (ACCOUNT_EXCEPTION_ID),
    foreign key (ACCOUNT_ID) references ACCOUNTS(ACCOUNT_ID),
    foreign key (EMPLOYEE_ID) references EMPLOYEES(EMPLOYEE_ID)
);
create or replace TABLE CARD_DETAILS(
    CARD_ID INTEGER NOT NULL,
    ACCOUNT_ID INTEGER ,
    CUSTOMER_ID INTEGER ,
    CARD_TYPE VARCHAR(255) NOT NULL,        
    CARD_NUMBER NUMBER(16,0) NOT NULL,
    CARD_LIMIT NUMBER(38,0) ,
    ISSUED_DATE DATE,
    VALID_DATE DATE,
    CARD_SUB_TYPE VARCHAR(255) NOT NULL,
    primary key (CARD_ID),
    foreign key (ACCOUNT_ID) references ACCOUNTS(ACCOUNT_ID),
    foreign key (CUSTOMER_ID) references CUSTOMERS(CUSTOMER_ID)
);



-- DDL for temprory fees transaction table from which we load data to transactions table in staging
create or replace TABLE TEMP_FEES_TRANSACTIONS (
	FEES_TRANSACTION_ID NUMBER(38,0) NOT NULL,
	ACCOUNT_ID NUMBER(38,0),
	FORMAT_ID NUMBER(38,0),
	TRANSACTION_TYPE_ID NUMBER(38,0),
	SOURCE VARCHAR(50),
	FILENAME VARCHAR(100),
	SENDER VARCHAR(200),
	RECEIVER VARCHAR(200),
	TRANSACTION_DATE DATE,
	PROCESS_DATE DATE,
	PROCESS_STATUS VARCHAR(15),
	CREATED_BY VARCHAR(225),
	CREATED_DATE DATE,
	UPDATED_DATE DATE,
	UPDATED_BY VARCHAR(225),
	CURRENCY_CODE VARCHAR(50),
	CHECK_NUMBER NUMBER(38,0),
	TRANSACTION_AMOUNT NUMBER(10,2),
	BANK_TO_BANK_INFO VARCHAR(225),
	ACH_ADDENDA VARCHAR(100),
	primary key (FEES_TRANSACTION_ID)
);
-- DDL for Credit recovery
create table CREDIT_RECOVERY (
Credit_Index number (3,0),
Scheduled_Calls number(3,0),
Scheduled_emails number(3,0),
Interest number(3,0),
Paid number(3,0),
Due number(3,0),
Balance number(3,0),
Date date,
City varchar (20)
);

-- DDL for Fund Recovery
create or replace table FUND_RECOVERY (
Collected number(6,0),
Brokerage number(6,0),
Assured number(6,0),
Target number(6,0),
Calls_Completed number(6,0),
Calls_Remaining number(6,0),
Date date,
City varchar (20)
);

create or replace table staging.fixed_asset
(
     asset_id number(38,0),
     asset_type varchar(50),
     purchase_date Date , 
     purchase_cost number(38,0),
     current_cost number(38,0),
     primary key (asset_id)
);


create or replace table staging.capital_expenditure
(
     expenditure_id number(38,0),
     asset_id number(38,0),
     expenditure_date Date,
     expenditure_amount number(38,0),
     primary key (expenditure_id),
     foreign key (asset_id) references fixed_asset(asset_id)
     
);



create or replace table staging.departments
(
     department_id number(38,0),
     department_name varchar(50),
     allocated_budget number(38,0),
     department_head_id number(38,0),
     primary key (department_id),
     foreign key (department_head_id) references employees(employee_id)
);


create or replace table staging.expense
(
     expense_id number(38,0),
     expense_date date,
     expense_amount number(38,0),
     description varchar(225),
     department_id number(38,0),
     primary key (expense_id),
     foreign key (department_id) references departments(department_id)
);


create or replace table staging.securities
(
     security_id number(38,0),
     security_name varchar(100),
     security_type varchar(100),
     quantity number(38,0),
     market_value number(38,0),
     purchase_date Date,
     purchase_price number(38,0),
     purchase_value number(38,0),
     primary key (security_id)  
);

--DDL for Retail Performance

create or replace TABLE RETAIL_PERFORMANCE (
	CUSTOMER_ID NUMBER(38,0) NOT NULL,
	DATE_COL DATE,
	LOCATION VARCHAR(255) NOT NULL,
	CUSTOMERS VARCHAR(255) NOT NULL,
	UNITS NUMBER(36,0),
	BALANCE NUMBER(36,0),
	LOAN_APPLICATIONS NUMBER(36,0),
	OVERTIME_HOURS NUMBER(36,0),
	OVERTIME_DOLLARS NUMBER(36,0),
	TURNOVER_RATE NUMBER(36,0),
	EMPLOYEE_NAME VARCHAR(255) NOT NULL,
	PRODUCT_TYPE VARCHAR(255) NOT NULL,
	REVENUE NUMBER(38,0) NOT NULL,
	CREDIT_CARD_DECISION_STATUS VARCHAR(255),
	CREDIT_CARD_TYPE VARCHAR(255),
	DEPOSIT_ACCOUNT_STATUS VARCHAR(255),
	ACCOUNT_NUMBER VARCHAR(50)
create or replace table staging.bank_debt
(
     debt_id number(38,0),
     debtor_name varchar(100),
     debt_type varchar(100),
     principal_amount number(38,0),
     interest_rate number(4,2),
     issue_date Date,
     maturity_date Date,
     collateral varchar(100),
     guarantee varchar(100),
     debt_status varchar(50),
     primary key (debt_id)  
);


create or replace table staging.non_performing_loan
(
     non_performing_loan_id number(38,0),
     loan_status varchar(225),
     last_payment_date date,
     description varchar(225),
     loan_id number(38,0),
     primary key (non_performing_loan_id),
     foreign key (loan_id) references loan_details(loan_id)
);


create or replace table staging.uninsured_deposits
(
     non_performing_account_id number(38,0),
     non_performing_amount number (38,0),
     tier1 number (38,0),
     risk_weighted_assets number (38,0),
     created_date DATE NOT NULL, 
     account_id number(38,0),
     description varchar(100),
     primary key (non_performing_account_id),
     foreign key (account_id) references accounts(account_id)
);
